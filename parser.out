Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> S
Rule 1     S -> E
Rule 2     E -> E DIVIDE A
Rule 3     E -> A
Rule 4     A -> A B
Rule 5     A -> B
Rule 6     B -> C
Rule 7     B -> C SUPERINDEX C
Rule 8     B -> C SUBINDEX C
Rule 9     B -> C SUPERINDEX C SUBINDEX C
Rule 10    B -> C SUBINDEX C SUPERINDEX C
Rule 11    C -> LBRACKET E RBRACKET
Rule 12    C -> LPAREN E RPAREN
Rule 13    C -> ID

Terminals, with rules where they appear

DIVIDE               : 2
ID                   : 13
LBRACKET             : 11
LPAREN               : 12
RBRACKET             : 11
RPAREN               : 12
SUBINDEX             : 8 9 10
SUPERINDEX           : 7 9 10
error                : 

Nonterminals, with rules where they appear

A                    : 2 3 4
B                    : 4 5
C                    : 6 7 7 8 8 9 9 9 10 10 10
E                    : 1 2 11 12
S                    : 0

Parsing method: LALR

state 0

    (0) S' -> . S
    (1) S -> . E
    (2) E -> . E DIVIDE A
    (3) E -> . A
    (4) A -> . A B
    (5) A -> . B
    (6) B -> . C
    (7) B -> . C SUPERINDEX C
    (8) B -> . C SUBINDEX C
    (9) B -> . C SUPERINDEX C SUBINDEX C
    (10) B -> . C SUBINDEX C SUPERINDEX C
    (11) C -> . LBRACKET E RBRACKET
    (12) C -> . LPAREN E RPAREN
    (13) C -> . ID

    LBRACKET        shift and go to state 6
    LPAREN          shift and go to state 8
    ID              shift and go to state 5

    A                              shift and go to state 1
    S                              shift and go to state 7
    B                              shift and go to state 3
    E                              shift and go to state 4
    C                              shift and go to state 2

state 1

    (3) E -> A .
    (4) A -> A . B
    (6) B -> . C
    (7) B -> . C SUPERINDEX C
    (8) B -> . C SUBINDEX C
    (9) B -> . C SUPERINDEX C SUBINDEX C
    (10) B -> . C SUBINDEX C SUPERINDEX C
    (11) C -> . LBRACKET E RBRACKET
    (12) C -> . LPAREN E RPAREN
    (13) C -> . ID

    RBRACKET        reduce using rule 3 (E -> A .)
    DIVIDE          reduce using rule 3 (E -> A .)
    $end            reduce using rule 3 (E -> A .)
    RPAREN          reduce using rule 3 (E -> A .)
    LBRACKET        shift and go to state 6
    LPAREN          shift and go to state 8
    ID              shift and go to state 5

    C                              shift and go to state 2
    B                              shift and go to state 9

state 2

    (6) B -> C .
    (7) B -> C . SUPERINDEX C
    (8) B -> C . SUBINDEX C
    (9) B -> C . SUPERINDEX C SUBINDEX C
    (10) B -> C . SUBINDEX C SUPERINDEX C

    LBRACKET        reduce using rule 6 (B -> C .)
    LPAREN          reduce using rule 6 (B -> C .)
    ID              reduce using rule 6 (B -> C .)
    RPAREN          reduce using rule 6 (B -> C .)
    DIVIDE          reduce using rule 6 (B -> C .)
    $end            reduce using rule 6 (B -> C .)
    RBRACKET        reduce using rule 6 (B -> C .)
    SUPERINDEX      shift and go to state 10
    SUBINDEX        shift and go to state 11


state 3

    (5) A -> B .

    LBRACKET        reduce using rule 5 (A -> B .)
    LPAREN          reduce using rule 5 (A -> B .)
    ID              reduce using rule 5 (A -> B .)
    DIVIDE          reduce using rule 5 (A -> B .)
    $end            reduce using rule 5 (A -> B .)
    RBRACKET        reduce using rule 5 (A -> B .)
    RPAREN          reduce using rule 5 (A -> B .)


state 4

    (1) S -> E .
    (2) E -> E . DIVIDE A

    $end            reduce using rule 1 (S -> E .)
    DIVIDE          shift and go to state 12


state 5

    (13) C -> ID .

    SUPERINDEX      reduce using rule 13 (C -> ID .)
    SUBINDEX        reduce using rule 13 (C -> ID .)
    LBRACKET        reduce using rule 13 (C -> ID .)
    LPAREN          reduce using rule 13 (C -> ID .)
    ID              reduce using rule 13 (C -> ID .)
    RPAREN          reduce using rule 13 (C -> ID .)
    DIVIDE          reduce using rule 13 (C -> ID .)
    $end            reduce using rule 13 (C -> ID .)
    RBRACKET        reduce using rule 13 (C -> ID .)


state 6

    (11) C -> LBRACKET . E RBRACKET
    (2) E -> . E DIVIDE A
    (3) E -> . A
    (4) A -> . A B
    (5) A -> . B
    (6) B -> . C
    (7) B -> . C SUPERINDEX C
    (8) B -> . C SUBINDEX C
    (9) B -> . C SUPERINDEX C SUBINDEX C
    (10) B -> . C SUBINDEX C SUPERINDEX C
    (11) C -> . LBRACKET E RBRACKET
    (12) C -> . LPAREN E RPAREN
    (13) C -> . ID

    LBRACKET        shift and go to state 6
    LPAREN          shift and go to state 8
    ID              shift and go to state 5

    A                              shift and go to state 1
    C                              shift and go to state 2
    B                              shift and go to state 3
    E                              shift and go to state 13

state 7

    (0) S' -> S .



state 8

    (12) C -> LPAREN . E RPAREN
    (2) E -> . E DIVIDE A
    (3) E -> . A
    (4) A -> . A B
    (5) A -> . B
    (6) B -> . C
    (7) B -> . C SUPERINDEX C
    (8) B -> . C SUBINDEX C
    (9) B -> . C SUPERINDEX C SUBINDEX C
    (10) B -> . C SUBINDEX C SUPERINDEX C
    (11) C -> . LBRACKET E RBRACKET
    (12) C -> . LPAREN E RPAREN
    (13) C -> . ID

    LBRACKET        shift and go to state 6
    LPAREN          shift and go to state 8
    ID              shift and go to state 5

    A                              shift and go to state 1
    C                              shift and go to state 2
    B                              shift and go to state 3
    E                              shift and go to state 14

state 9

    (4) A -> A B .

    LBRACKET        reduce using rule 4 (A -> A B .)
    LPAREN          reduce using rule 4 (A -> A B .)
    ID              reduce using rule 4 (A -> A B .)
    DIVIDE          reduce using rule 4 (A -> A B .)
    $end            reduce using rule 4 (A -> A B .)
    RBRACKET        reduce using rule 4 (A -> A B .)
    RPAREN          reduce using rule 4 (A -> A B .)


state 10

    (7) B -> C SUPERINDEX . C
    (9) B -> C SUPERINDEX . C SUBINDEX C
    (11) C -> . LBRACKET E RBRACKET
    (12) C -> . LPAREN E RPAREN
    (13) C -> . ID

    LBRACKET        shift and go to state 6
    LPAREN          shift and go to state 8
    ID              shift and go to state 5

    C                              shift and go to state 15

state 11

    (8) B -> C SUBINDEX . C
    (10) B -> C SUBINDEX . C SUPERINDEX C
    (11) C -> . LBRACKET E RBRACKET
    (12) C -> . LPAREN E RPAREN
    (13) C -> . ID

    LBRACKET        shift and go to state 6
    LPAREN          shift and go to state 8
    ID              shift and go to state 5

    C                              shift and go to state 16

state 12

    (2) E -> E DIVIDE . A
    (4) A -> . A B
    (5) A -> . B
    (6) B -> . C
    (7) B -> . C SUPERINDEX C
    (8) B -> . C SUBINDEX C
    (9) B -> . C SUPERINDEX C SUBINDEX C
    (10) B -> . C SUBINDEX C SUPERINDEX C
    (11) C -> . LBRACKET E RBRACKET
    (12) C -> . LPAREN E RPAREN
    (13) C -> . ID

    LBRACKET        shift and go to state 6
    LPAREN          shift and go to state 8
    ID              shift and go to state 5

    A                              shift and go to state 17
    C                              shift and go to state 2
    B                              shift and go to state 3

state 13

    (11) C -> LBRACKET E . RBRACKET
    (2) E -> E . DIVIDE A

    RBRACKET        shift and go to state 18
    DIVIDE          shift and go to state 12


state 14

    (12) C -> LPAREN E . RPAREN
    (2) E -> E . DIVIDE A

    RPAREN          shift and go to state 19
    DIVIDE          shift and go to state 12


state 15

    (7) B -> C SUPERINDEX C .
    (9) B -> C SUPERINDEX C . SUBINDEX C

    LBRACKET        reduce using rule 7 (B -> C SUPERINDEX C .)
    LPAREN          reduce using rule 7 (B -> C SUPERINDEX C .)
    ID              reduce using rule 7 (B -> C SUPERINDEX C .)
    RPAREN          reduce using rule 7 (B -> C SUPERINDEX C .)
    DIVIDE          reduce using rule 7 (B -> C SUPERINDEX C .)
    $end            reduce using rule 7 (B -> C SUPERINDEX C .)
    RBRACKET        reduce using rule 7 (B -> C SUPERINDEX C .)
    SUBINDEX        shift and go to state 20


state 16

    (8) B -> C SUBINDEX C .
    (10) B -> C SUBINDEX C . SUPERINDEX C

    LBRACKET        reduce using rule 8 (B -> C SUBINDEX C .)
    LPAREN          reduce using rule 8 (B -> C SUBINDEX C .)
    ID              reduce using rule 8 (B -> C SUBINDEX C .)
    RPAREN          reduce using rule 8 (B -> C SUBINDEX C .)
    DIVIDE          reduce using rule 8 (B -> C SUBINDEX C .)
    $end            reduce using rule 8 (B -> C SUBINDEX C .)
    RBRACKET        reduce using rule 8 (B -> C SUBINDEX C .)
    SUPERINDEX      shift and go to state 21


state 17

    (2) E -> E DIVIDE A .
    (4) A -> A . B
    (6) B -> . C
    (7) B -> . C SUPERINDEX C
    (8) B -> . C SUBINDEX C
    (9) B -> . C SUPERINDEX C SUBINDEX C
    (10) B -> . C SUBINDEX C SUPERINDEX C
    (11) C -> . LBRACKET E RBRACKET
    (12) C -> . LPAREN E RPAREN
    (13) C -> . ID

    RBRACKET        reduce using rule 2 (E -> E DIVIDE A .)
    DIVIDE          reduce using rule 2 (E -> E DIVIDE A .)
    $end            reduce using rule 2 (E -> E DIVIDE A .)
    RPAREN          reduce using rule 2 (E -> E DIVIDE A .)
    LBRACKET        shift and go to state 6
    LPAREN          shift and go to state 8
    ID              shift and go to state 5

    C                              shift and go to state 2
    B                              shift and go to state 9

state 18

    (11) C -> LBRACKET E RBRACKET .

    SUPERINDEX      reduce using rule 11 (C -> LBRACKET E RBRACKET .)
    SUBINDEX        reduce using rule 11 (C -> LBRACKET E RBRACKET .)
    LBRACKET        reduce using rule 11 (C -> LBRACKET E RBRACKET .)
    LPAREN          reduce using rule 11 (C -> LBRACKET E RBRACKET .)
    ID              reduce using rule 11 (C -> LBRACKET E RBRACKET .)
    RPAREN          reduce using rule 11 (C -> LBRACKET E RBRACKET .)
    DIVIDE          reduce using rule 11 (C -> LBRACKET E RBRACKET .)
    $end            reduce using rule 11 (C -> LBRACKET E RBRACKET .)
    RBRACKET        reduce using rule 11 (C -> LBRACKET E RBRACKET .)


state 19

    (12) C -> LPAREN E RPAREN .

    SUPERINDEX      reduce using rule 12 (C -> LPAREN E RPAREN .)
    SUBINDEX        reduce using rule 12 (C -> LPAREN E RPAREN .)
    LBRACKET        reduce using rule 12 (C -> LPAREN E RPAREN .)
    LPAREN          reduce using rule 12 (C -> LPAREN E RPAREN .)
    ID              reduce using rule 12 (C -> LPAREN E RPAREN .)
    RPAREN          reduce using rule 12 (C -> LPAREN E RPAREN .)
    DIVIDE          reduce using rule 12 (C -> LPAREN E RPAREN .)
    $end            reduce using rule 12 (C -> LPAREN E RPAREN .)
    RBRACKET        reduce using rule 12 (C -> LPAREN E RPAREN .)


state 20

    (9) B -> C SUPERINDEX C SUBINDEX . C
    (11) C -> . LBRACKET E RBRACKET
    (12) C -> . LPAREN E RPAREN
    (13) C -> . ID

    LBRACKET        shift and go to state 6
    LPAREN          shift and go to state 8
    ID              shift and go to state 5

    C                              shift and go to state 22

state 21

    (10) B -> C SUBINDEX C SUPERINDEX . C
    (11) C -> . LBRACKET E RBRACKET
    (12) C -> . LPAREN E RPAREN
    (13) C -> . ID

    LBRACKET        shift and go to state 6
    LPAREN          shift and go to state 8
    ID              shift and go to state 5

    C                              shift and go to state 23

state 22

    (9) B -> C SUPERINDEX C SUBINDEX C .

    LBRACKET        reduce using rule 9 (B -> C SUPERINDEX C SUBINDEX C .)
    LPAREN          reduce using rule 9 (B -> C SUPERINDEX C SUBINDEX C .)
    ID              reduce using rule 9 (B -> C SUPERINDEX C SUBINDEX C .)
    RPAREN          reduce using rule 9 (B -> C SUPERINDEX C SUBINDEX C .)
    DIVIDE          reduce using rule 9 (B -> C SUPERINDEX C SUBINDEX C .)
    $end            reduce using rule 9 (B -> C SUPERINDEX C SUBINDEX C .)
    RBRACKET        reduce using rule 9 (B -> C SUPERINDEX C SUBINDEX C .)


state 23

    (10) B -> C SUBINDEX C SUPERINDEX C .

    LBRACKET        reduce using rule 10 (B -> C SUBINDEX C SUPERINDEX C .)
    LPAREN          reduce using rule 10 (B -> C SUBINDEX C SUPERINDEX C .)
    ID              reduce using rule 10 (B -> C SUBINDEX C SUPERINDEX C .)
    RPAREN          reduce using rule 10 (B -> C SUBINDEX C SUPERINDEX C .)
    DIVIDE          reduce using rule 10 (B -> C SUBINDEX C SUPERINDEX C .)
    $end            reduce using rule 10 (B -> C SUBINDEX C SUPERINDEX C .)
    RBRACKET        reduce using rule 10 (B -> C SUBINDEX C SUPERINDEX C .)

